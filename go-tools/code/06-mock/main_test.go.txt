package main

import (
	"errors"
	"testing"
)

func TestSMSService_SendChargeNotification(t *testing.T) {
	type args struct {
		value int
	}
	tests := []struct {
		name    string
		sms     MessageService
		args    args
		wantErr bool
	}{
		{
			name: "send 100",
			sms:  new(SMSService),
			args: args{value: 100},
		},
		{
			name:    "send negative",
			sms:     new(SMSService),
			args:    args{value: -100},
			wantErr: true,
		},
		{
			name: "send 0",
			sms:  new(SMSService),
			args: args{value: 0},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if err := tt.sms.SendChargeNotification(tt.args.value); (err != nil) != tt.wantErr {
				t.Errorf("SMSService.SendChargeNotification() error = %v, wantErr %v", err, tt.wantErr)
			}

		})
	}
}

func TestMyService_ChargeCustomer(t *testing.T) {
	type args struct {
		value int
		err   error
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "charge customer 100",
			args: args{value: 100},
		},
		{
			name: "charge customer -100",
			args: args{value: 100, err: errors.New("error")},
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockSms := new(MockMessageService)
			a := MyService{
				messageService: mockSms,
			}
			mockSms.On("SendChargeNotification", tt.args.value).Return(tt.args.err)
			if err := a.ChargeCustomer(tt.args.value); (err != nil) != tt.wantErr {
				t.Errorf("MyService.ChargeCustomer() error = %v, wantErr %v", err, tt.wantErr)
			}
			mockSms.AssertExpectations(t)
		})
	}
}

func Test_main(t *testing.T) {
	tests := []struct {
		name string
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			main()
		})
	}
}
